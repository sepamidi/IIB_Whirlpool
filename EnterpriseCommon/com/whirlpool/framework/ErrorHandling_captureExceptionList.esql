BROKER SCHEMA com.whirlpool.framework

DECLARE mExpiry EXTERNAL int 72000; -- 2 hours default

CREATE COMPUTE MODULE ErrorHandling_captureExceptionList
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE ID CHAR;
	  	DECLARE mNumber integer;
	  	DECLARE mText char;
		SET ID = BrokerName || '/' ||  
	           ExecutionGroupLabel || '/' ||
	           MessageFlowLabel;

	  	SET Environment.Variables.ID = ID;
		SET OutputRoot.Properties.Transactional = false;
		-- Temporarily store ExceptionList in OutputRoot.XMLNSC
	  -- to profit from implicit casting of XML parser into CHAR
	  -- which is required for RFH2.usr		
		 
	  -- Pass the ExceptionList to return back the inner most child error number and Error Reason
	  CALL getLastExceptionDetail(InputExceptionList, mNumber, mText);

	    SET OutputRoot.XMLNSC.ExceptionDump.ErrList = InputExceptionList;
	    Set Environment.Variables.errorNum = mNumber;
	    Set Environment.Variables.errorReason = mText;
 	
 		CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2' NAME 'MQRFH2';
		SET OutputRoot.MQRFH2.(MQRFH2.Field)StrucId = MQRFH_STRUC_ID;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Version = MQRFH_VERSION_2;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Format = OutputRoot.MQMD.Format;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Flags = MQRFH_NONE;		
	     	
	  SET OutputRoot.MQRFH2.usr=OutputRoot.XMLNSC; 
	  SET OutputRoot.MQRFH2.usr.ErrorHandler.ID = ID; 
	  SET OutputRoot.MQRFH2.usr.ErrorNumber = mNumber; 
	  SET OutputRoot.MQRFH2.usr.ErrorReason = mText;
	  
	--DECLARE a,b CHARACTER;
----
----	--SET a = CAST(InputRoot.BLOB.BLOB as char CCSID 1208 Encoding 815);
----	--SET b= LENGTH(a) - 36; trimming last 36 bytes of SAID data
--	SET a = CAST(InputRoot.BLOB.BLOB as char CCSID InputRoot.MQMD.CodedCharSetId);
--	SET a = CAST(InputRoot.BLOB.BLOB as char CCSID 437);
--	SET b=	SUBSTRING(a FROM 1 FOR LENGTH(a) - 36);

	 --SET OutputRoot.MQRFH2.usr.RawData =  SUBSTRING(CAST(InputRoot.BLOB.BLOB as char CCSID InputRoot.Properties.CodedCharSetId) FROM 1 FOR LENGTH(CAST(InputRoot.BLOB.BLOB as char CCSID InputRoot.Properties.CodedCharSetId)) - 36 );
	 SET OutputRoot.MQRFH2.usr.RawData = CAST(InputRoot.BLOB.BLOB as char);
	 SET OutputRoot.MQRFH2.usr.Timestamp = CAST(InputRoot.Properties.CreationTime AS TIMESTAMP);
	 SET OutputRoot.MQRFH2.usr.SAID =	 Environment.Variables.SAID;
--	  -- Delete the temporary XML body		
	  DELETE FIELD OutputRoot.XMLNSC; 
		
	  -- set message to expire 
	  SET OutputRoot.MQMD.Expiry = mExpiry;
	  
	  -- copy original message body		
	  SET OutputRoot.BLOB = InputBody;	
		
		
		RETURN TRUE;
	END;


CREATE PROCEDURE getLastExceptionDetail(IN  InputTree reference,
	                                 OUT messageNumber integer,
                                         OUT messageText char)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
	-- Create a reference to the first child of the exception list
   	   declare ptrException reference to InputTree.*[1];
   	    
	-- keep looping while the moves to the child of exception list work 
	WHILE lastmove(ptrException) DO
			
	  -- store the current values for the error number and text
	  IF ptrException.Number is not null THEN
            SET messageNumber = ptrException.Number;
            SET messageText = ptrException.Text;
	  END IF;
  			
	  -- now move to the last child which should be the next exceptionlist
			
	  move ptrException lastchild;
		
	END WHILE; 

  END; /* getLastException */
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
